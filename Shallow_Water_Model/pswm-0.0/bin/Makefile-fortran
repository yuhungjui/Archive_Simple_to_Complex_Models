#-----------------------------------------------------------------------------
# Makefile-fortran:  defines rules for processing Fortran source
#
# This is intended to be read in by another Makefile.
# It requires GNU make (works with version 3.79 or greater).
#
# Fortran source files are assumed to be in one of four flavors, depending
# on the suffix:
#
#	.f      fixed-form (or f77) code
#	.f90    free-form source code
#	.F      fixed-form (or f77) code, pass to cpp first
#	.F90    free-form source code, pass to cpp first
#
# The rules defined below use the variable FC to run the Fortran compiler 
# for compilation and linking (e.g., see COMPILE.f and LINK.f below).
# The Fortran compiler is referenced only by the variable FC (in commands
# such as LINK.f defined below).  The following flags are used:
#
#	FFLAGS		Fortran flags--used on all commands
#	TARGET_ARCH	target architecture flags--used on all commands
#	CPPFLAGS	cpp flags--used on all commands for .F and .F90 files
#	LDFLAGS		loader flags--used on linking commands only
#
# Since none of these variables are defined here, you can define them as
# needed in your Makefile or on the command line.  For example:
#
# 	make FC=g95 FFLAGS="-Wall -Wimplicit" myf90code
#
# You may wish to define these variables in a system-dependent Makefile-host.
#
# Author:  Scott R. Fulton
#
# Revision history
# ----------------
# 08 Jun 2007:  Original version (based in part on Makefile.std for sig)
# 03 Aug 2007:  Expanded comments to explain how this works
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Initializations
#-----------------------------------------------------------------------------
# specify the shell to avoid surprises in weird environments
SHELL	= /bin/sh

#-----------------------------------------------------------------------------
# Replace the built-in implicit rules with GNU-make "pattern rules".
# This allows us to treat free and fixed source separately based on suffixes.
# It also allows for different command lines for preprocessing if needed.
#-----------------------------------------------------------------------------
.SUFFIXES:	# delete the default list of suffixes for safety
.SUFFIXES:	.o .f .f90 .F .F90

#-----------------------------------------------------------------------------
# Variables:  commands to preprocess, compile, and link
#-----------------------------------------------------------------------------
PREPROCESS.F	= $(FC) $(FFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -F
PREPROCESS.F90	= $(PREPROCESS.F)

COMPILE.f	= $(FC) $(FFLAGS) $(TARGET_ARCH) -c
COMPILE.f90	= $(COMPILE.f)
COMPILE.F	= $(FC) $(FFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
COMPILE.F90	= $(COMPILE.F)

LINK.f		= $(FC) $(FFLAGS) $(LDFLAGS) $(TARGET_ARCH)
LINK.f90	= $(LINK.f)
LINK.F		= $(FC) $(FFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
LINK.F90	= $(LINK.F)

#-----------------------------------------------------------------------------
# Pattern rules for processing Fortran source
#-----------------------------------------------------------------------------

# fixed-form, no preprocessing
%.f:

%: %.f
	$(LINK.f) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.f
	$(COMPILE.f) $(OUTPUT_OPTION) $<

# fixed-form with preprocessing
%.F:

%: %.F
	$(LINK.F) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.F
	$(COMPILE.F) $(OUTPUT_OPTION) $<

%.f: %.F
	$(PREPROCESS.F) $(OUTPUT_OPTION) $<

# free-form, no preprocessing
%.f90:

%: %.f90
	$(LINK.f90) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.f90
	$(COMPILE.f90) $(OUTPUT_OPTION) $<

# free-form with preprocessing
%.F90:

%: %.F90
	$(LINK.F90) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.F90
	$(COMPILE.F90) $(OUTPUT_OPTION) $<

%.f90: %.F90
	$(PREPROCESS.F90) $(OUTPUT_OPTION) $<
