      BLOCK DATA VTDOC
C
C
C   LATEST REVISION     1 MAY 1984
C
C *********************** INTRODUCTION TO  VTRANS **********************
C
C      VTRANS  IS A COLLECTION OF ROUTINES FOR SOLVING THE VERTICAL
C          STRUCTURE PROBLEM AND PERFORMING VERTICAL TRANSFORMS.
C
C   DEFINITIONS
C
C       THE VERTICAL STRUCTURE PROBLEM IS
C
C                    D  (  1   DPSI)   PSI
C           L(PSI) = -- (-----*----) + --- = 0     (0.LT.PT.LE.P.LE.PB),
C                    DP (SIGMA  DP )   C*C
C
C           DPSI                     DPSI   P*SIGMA
C           ---- = 0  AT  P = PT,    ---- + -------*PSI = 0  AT  P = PB.
C            DP                       DP      R*T
C
C       HERE  P  IS PRESSURE,  PSI  IS THE VERTICAL STRUCTURE FUNCTION,
C       C  IS THE PHASE SPEED,  SIGMA IS THE STATIC STABILITY,  R  IS
C       THE GAS CONSTANT,  T  IS THE BASIC STATE TEMPERATURE, AND  PT
C       AND  PB  ARE THE TOP AND BOTTOM PRESSURES, RESPECTIVELY.
C           THE  ROUTINE  VTSET  SOLVES THIS PROBLEM (APPROXIMATELY)
C       USING A BASIC STATE TEMPERATURE PROFILE SUPPLIED BY THE USER.
C       THE RESULTING EIGENVALUES  C(K)  (K=0, ..., N)  ARE REAL AND
C       THE CORRESPONDING EIGENFUNCTIONS  PSI(K,P)  (K=0, ..., N)
C       ARE ORTHONORMAL  IN THE VERTICAL INNER PRODUCT
C
C                        1
C           ( U, V ) = ----- * INTEGRAL (P=PT TO P=PB) OF U(P)*V(P),
C                      PB-PT
C
C       WHERE  U  AND  V  DENOTE ANY FUNCTIONS OF  P.  THE FORWARD
C       TRANSFORM OF A FUNCTION FUNCTION  F(P)  IS DEFINED BY
C
C           FHAT(K) = ( F(P), PSI(K,P) )
C
C       AND THE CORRESPONDING INVERSE TRANSFORM IS
C
C           F(P) = SUM (K=0 TO N) OF FHAT(K)*PSI(K,P).
C
C       THIS TRANSFORM PAIR HAS THE PROPERTY THAT FOR ANY TWO FUNCTIONS
C       F  AND  G  WITH TRANSFORMS  FHAT  AND  GHAT,  RESPECTIVELY,
C       THEIR VERTICAL INNER PRODUCT  IS GIVEN BY
C
C           ( F, G ) = SUM (K=0 TO N) OF FHAT(K)*GHAT(K)
C
C       AND THEIR ENERGY INNER PRODUCT IS GIVEN BY
C
C           ( F, L(G) ) = SUM (K=0 TO N) OF FHAT(K)*GHAT(K)/C(K)**2
C
C       THUS IF  U(P)  IS THE WIND SPEED, THE KINETIC ENERGY ASSOCIATED
C       WITH VERTICAL MODE  K  IS  UHAT(K)**2,  AND IF  PHI  IS THE
C       PERTURBATION GEOPOTENTIAL, THE AVAILABLE POTENTIAL ENERGY
C       ASSOCIATED WITH VERTICAL MODE  K  IS  (PHIHAT(K)/C(K))**2.
C           ROUTINES FROM THIS PACKAGE COMPUTE NUMERICAL APPROXIMATIONS
C       TO THESE TRANSFORMS FOR FUNCTIONS SUPPLIED AT DISCRETE PRESSURE
C       LEVELS UTILIZING A CONTINUOUS FUNCTION FIT TO THE SPECIFIED
C       DATA. THIS CONTINUOUS FIT TAKES THE FORM OF A LINEAR COMBINATION
C       OF VERTICAL BASIS FUNCTIONS (CHEBYSHEV POLYNOMIALS MODIFIED TO
C       SATISFY THE BOUNDARY CONDITIONS), WITH THE COEFFICIENTS IN THIS
C       LINEAR COMBINATION REFERRED TO AS THE 'VBF' COEFFICIENTS OF THE
C       FUNCTION.  THUS A FORWARD TRANSFORM OF A FUNCTION IS COMPUTED
C       FROM DISCRETE DATA BY FIRST OBTAINING THE VBF COEFFICIENTS
C       (ROUTINE  VPROJ)  AND THEN COMPUTING THE SPECTRAL COEFFICIENTS
C       (ROUTINE  VTRAN  WITH THE MATRIX  TFOR).  SIMILARLY, AN INVERSE
C       TRANSFORM IS COMPUTED FROM THESE SPECTRAL COEFFICIENTS BY FIRST
C       OBTAINING THE VBF COEFFICIENTS (ROUTINE  VTRAN  WITH THE MATRIX
C       TINV)  AND THEN EVALUATING THAT REPRESENTATION AT ANY DESIRED
C       PRESSURE LEVELS (ROUTINE  VEVAL).  THIS MAY BE REPRESENTED AS:
C
C                     VPROJ                  VTRAN  (TFOR)
C             *------------------->     *--------------------->
C      PHYSICAL                     VBF                      SPECTRAL
C   REPRESENTATION             REPRESENTATION             REPRESENTATION
C   **************             **************             **************
C    P(I), F(P(I))                 FVBF(J)                    FHAT(K)
C    (I=1, ..., M)              (J=0, ..., N)              (K=0, ..., N)
C                     VEVAL                  VTRAN  (TINV)
C             <-------------------*     <---------------------*
C
C   CONTENTS
C
C       USER-LEVEL ROUTINES
C
C           VTSET   SOLVES THE VERTICAL STRUCTURE PROBLEM FOR A
C                   TEMPERATURE PROFILE GIVEN AT DISCRETE PRESSURES
C                   AND COMPUTES THE TRANSFORM MATRICES  TFOR  AND  TINV
C
C           VPROJ   COMPUTES THE VBF REPRESENTATION OF A FUNCTION
C
C           VTRAN   COMPUTES THE FORWARD (VBF TO SPECTRAL) AND
C                   INVERSE (SPECTRAL TO VBF) VERTICAL TRANSFORMS
C
C           VEVAL   EVALUATES THE VBF REPRESENTATION OF A FUNCTION
C
C       INTERNAL ROUTINES
C
C           RRGSET  SETS UP THE TEMPERATURE AND STABILITY APPROXIMATIONS
C
C           RRGVAL  EVALUATES THE STABILITY APPROXIMATION
C
C           FUNSET  SETS UP A CONTINUOUS APPROXIMATION TO FUNCTION DATA
C
C           FUNVAL  EVALUATES THE CONTINUOUS APPROXIMATION TO A FUNCTION
C
C           VBFVAL  EVALUATES THE VERTICAL BASIS FUNCTIONS
C
C           CSSET   SETS UP A CUBIC SPLINE INTERPOLATE
C
C           CSVAL   EVALUATES A CUBIC SPLINE INTERPOLATE
C
C           GAUSSL  COMPUTES GAUSS-LEGENDRE WEIGHTS AND ABSCISSAS
C
C   REQUIRED LIBRARY ROUTINE
C
C       RSG     REAL SYMMETRIC GENERALIZED EIGENPROBLEM SOLVER (EISPACK)
C
C   LANGUAGE    FORTRAN 77
C
C   REFERENCE   FULTON, S. R. AND W. H. SCHUBERT, 1984:  VERTICAL NORMAL
C               MODE TRANSFORMS:  THEORY AND APPLICATION.  SUBMITTED TO
C               MONTHLY WEATHER REVIEW.
C
C   HISTORY     WRITTEN IN APRIL 1983 BY SCOTT R. FULTON
C
C
      END
      SUBROUTINE VTSET( M, P, RT, N, W, WORK, CON, C, TFOR, TINV, IERR )
C
C
C   PURPOSE
C
C       GIVEN A BASIC STATE TEMPERATURE PROFILE THIS ROUTINE SOLVES THE
C       VERTICAL STRUCTURE PROBLEM AND GENERATES THE TRANSFORM MATRICES
C
C   ARGUMENTS
C
C       DIMENSION   P(M)  , RT(M,5), W(0:N,2)     , WORK(0:N,0:N)
C                   CON(4), C(0:N) , TFOR(0:N,0:N), TINV(0:N,0:N)
C
C       INPUT
C
C           M       NUMBER OF PRESSURE LEVELS AT WHICH THE BASIC
C                   STATE TEMPERATURE PROFILE IS SUPPLIED (M.GE.3)
C
C           P       ARRAY OF PRESSURE LEVELS (IN INCREASING ORDER).
C                   THE MINIMUM AND MAXIMUM PRESSURE LEVELS INPUT
C                   BECOME THE TOP AND BOTTOM PRESSURES, RESPECTIVELY.
C                   NOTE:  THE TOP PRESSURE MUST BE POSITIVE.
C
C           RT      ARRAY CONTAINING THE CORRESPONDING (ABSOLUTE)
C                   TEMPERATURES  T  MULTIPLIED BY THE GAS CONSTANT  R:
C                       RT(I,1) = R*T( P(I) )   (I = 1, ..., M)
C
C           N       DESIRED SPECTRAL TRUNCATION (INDEX OF THE LAST
C                   VERTICAL MODE)--MUST HAVE  N.GE.SQRT( M+4 )
C
C       WORK SPACE
C
C           W       REAL ARRAY OF LENGTH AT LEAST  2*(N+1)
C
C           WORK    REAL ARRAY OF LENGTH AT LEAST  (N+1)**2
C
C       OUTPUT
C
C           RT      THE STORAGE LOCATIONS  RT(I,J)  (I=1, ..., M)  FOR
C                   J=2, ..., 5  CONTAIN PARAMETERS DEFINING THE CUBIC
C                   SPLINE FIT TO  R*T  AND THE CYEBYSHEV POLYNOMIAL
C                   FIT TO THE RECIPROCAL OF THE STATIC STABILITY
C                   (THE INPUT VALUES  RT(I,1)  ARE UNCHANGED).
C
C           WORK    CONTAINS THE VERTICAL INNER PRODUCTS
C                   OF THE VERTICAL BASIS FUNCTIONS
C
C           CON     CONTAINS CONSTANTS TO BE USED BY VTRANS ROUTINES
C
C           C       CONTAINS THE PHASE SPEEDS--IN THE SAME
C                   UNITS AS SQRT( RT )--IN DECREASING ORDER
C
C           TFOR    FORWARD TRANSFORM MATRIX (TO BE USED BY  VTRAN)
C
C           TINV    INVERSE TRANSFORM MATRIX (TO BE USED BY  VTRAN)
C                   NOTE:  THE KTH COLUMN OF  TINV  CONSISTS OF THE VBF
C                   COEFFICIENTS OF VERTICAL STRUCTURE FUNCTION  PSI(K),
C                   SO THAT FUNCTION MAY BE EVALUATED BY CALLING
C                       VEVAL( TINV(0,K), MD, M, P, CON, N, W, PSIVAL )
C                   (SEE THE COMMENTS IN THE ROUTINE  VEVAL)
C
C           IERR    INTEGER ERROR FLAG  (ZERO ON NORMAL RETURN)
C
C           NOTE:   UPON RETURN, THE CUBIC SPLINE FIT TO  R*T  MAY BE
C                   EVALUATED AT ANY PRESSURE LEVEL  PL  AS
C                       VALUE = CSVAL( PL, MD, M, P, RT, 0 )
C                   (WHERE  MD  IS THE DERIVATIVE DESIRED, E.G.  MD=0
C                   FOR THE VALUE, MD=1 FOR THE DERIVATIVE WITH RESPECT
C                   TO  P, ETC.), AND THE RECIPROCAL OF THE STATIC
C                   STABILITY  SIGMA  MAY BE EVALUATED AT  PL  AS
C                       VALUE = PL**2*RRGVAL( PL, CON, M, RT, IERR )
C                   (WHERE  IERR=0  IS RETURNED IF  SIGMA  IS POSITIVE)
C
C   METHOD
C
C       THE VERTICAL STRUCTURE PROBLEM IS SOLVED BY THE RAYLEIGH-RITZ-
C       GALERKIN METHOD USING POLYNOMIAL BASIS FUNCTIONS (CHEBYSHEV
C       POLYNOMIALS MODIFIED TO SATISFY THE BOUNDARY CONDITIONS).  THE
C       INNER PRODUCTS OF THE BASIS FUNCTIONS ARE COMPUTED BY NUMERICAL
C       QUADRATURE, USING A LEAST-SQUARES CHEBYSHEV POLYNOMIAL FIT TO
C       THE RECIPROCAL OF THE STATIC STABILITY  GAMMA.  THE RESULTING
C       GENERALIZED EIGENPROBLEM IS SOLVED BY THE EISPACK ROUTINE  RSG.
C
C   TIMING
C
C       WITH A TYPICAL (TROPICAL) BASIC STATE TEMPERATURE PROFILE
C       (SUPPLIED AT 23 PRESSURE LEVELS), EXECUTION TIME WAS ABOUT
C       0.00016*N**2  SECONDS ON THE NCAR CRAY1 FOR  8 .LE. N .LE. 64.
C
C   ERROR CONDITIONS
C
C       IERR =  1   M  TOO SMALL  (M  MUST BE AT LEAST  3)
C
C       IERR =  2   PRESSURE LEVELS NOT IN INCREASING ORDER
C
C       IERR =  3   TOP PRESSURE NOT POSITIVE
C
C       IERR =  4   SURFACE TEMPERATURE NOT POSITIVE
C
C       IERR =  5   STABILITY NOT STRICTLY POSITIVE ON THE DOMAIN
C
C       IERR =  6   N  TOO SMALL  (N  MUST BE AT LEAST  SQRT( M+4 ))
C
C       IERR =  7   VERTICAL INNER PRODUCT MATRIX NOT POSITIVE DEFINITE
C
C       IERR =  8   ENERGY   INNER PRODUCT MATRIX NOT POSITIVE DEFINITE
C
C       IERR =  9   PROBLEMS IN COMPUTING WEIGHTS AND ABSCISSAS
C
C       IERR = 10+I CONVERGENCE FAILED FOR PHASE SPEED  I
C                   (PHASE SPEEDS  0, 1, ..., I-1  ARE OKAY)
C
C
      INTEGER  M, N, IERR
      REAL  P(M), RT(M,5), W(0:N,0:1), WORK(0:N,0:N)
      REAL  CON(4), C(0:N), TFOR(0:N,0:N), TINV(0:N,0:N)
      INTEGER  I, IG, J, K, NDEG, NG, NGAUSS
      REAL  BETA, DP, FACT, PB, PG, PT, RRG, RRGB, RTB, WG, WT
      COMMON  /RRGCOM/ NDEG, NGAUSS
      SAVE    /RRGCOM/
C
C ************************** INITIALIZATIONS ***************************
C
C   SET UP THE TEMPERATURE AND STABLITY APPROXIMATIONS
C
      IERR = 0
      CALL RRGSET( M, P, RT, IERR )
      IF ( IERR.NE.0 )  RETURN
C
C   SET UP THE CONSTANTS ARRAY
C
      PT = P(1)
      IF ( PT.LE.0.0 )  IERR = 3
      PB = P(M)
      DP = PB - PT
      RTB = RT(M,1)
      IF ( RTB.LE.0.0 )  IERR = 4
      CON(1) = PT
      CON(2) = PB
      CON(3) = DP
      RRGB = RRGVAL( PB, CON, M, RT, IERR )
      IF ( IERR.NE.0 )  RETURN
      BETA = 1.0/(RTB*RRGB)
      CON(4) = BETA
C
C ************* INNER PRODUCTS OF VERTICAL BASIS FUNCTIONS *************
C
C   COMPUTE THE GAUSS-LEGENDRE ABSCISSAS AND WEIGHTS
C
      NG = N + 2 + (NDEG+1)/2
      IF ( MOD( NDEG, 2 ).EQ.0 )  NG = NG + 1
      IF ( 2*NG.GT.(N+1)**2 )  IERR = 6
      IF ( IERR.NE.0 )  RETURN
      CALL GAUSSL( NG, PT, PB, TINV(0,0), TINV(NG,0), IERR )
      IF ( IERR.NE.0 )  RETURN
      DO 10 I=0,N
      DO 10 J=I,N
      TFOR(I,J) = 0.0
   10 WORK(I,J) = 0.0
C
C   COMPUTE THE INTEGRALS USING GAUSS-LEGENDRE QUADRATURE (NG  POINTS)
C
      DO 30 IG=1,NG
          PG = TINV(   IG-1,0)
          WG = TINV(NG+IG-1,0)
          RRG = RRGVAL( PG, CON, M, RT, IERR )
          IF ( IERR.NE.0 )  RETURN
          WT = WG*RRG*PG**2
          CALL VBFVAL( PG, 1, CON, N, W )
          DO 20 I=0,N
          DO 20 J=I,N
          TFOR(I,J) = TFOR(I,J) + WT*W(I,1)*W(J,1)
   20     WORK(I,J) = WORK(I,J) + WG*W(I,0)*W(J,0)
   30 CONTINUE
C
C   ADD IN THE BOUNDARY TERM AND SCALE THE MATRICES
C
      CALL VBFVAL( PB, 0, CON, N, W )
      FACT = BETA*RRGB*PB
      DO 40 I=0,N
      DO 40 J=I,N
      TFOR(I,J) = (TFOR(I,J) + FACT*W(I,0)*W(J,0))/DP
   40 WORK(I,J) =  WORK(I,J)/DP
C
C ************** SOLUTION OF THE GENERALIZED EIGENPROBLEM **************
C
      CALL RSG( N+1, N+1, TFOR, WORK, C, 1, TINV, W(0,0), W(0,1), IERR )
      IF ( IERR.NE.0 )  THEN
          IF ( IERR.EQ.7*N+8 )  THEN
              IERR = 7
          ELSE
              IERR = 9 + IERR
          END IF
          RETURN
      END IF
C
C   COMPUTE THE PHASE SPEEDS FROM THE EIGENVALUES
C
      DO 50 I=0,N
          IF ( C(I).LE.0.0 )  IERR = 8
          IF ( IERR.NE.0 )  RETURN
          C(I) = 1.0/SQRT( C(I) )
   50 CONTINUE
C
C   COMPUTE THE FORWARD TRANSFORMATION MATRIX
C
      DO 60 I=0,N
      DO 60 J=I+1,N
   60 WORK(J,I) = WORK(I,J)
      DO 80 I=0,N
      DO 80 J=0,N
          TFOR(I,J) = 0.0
          DO 70 K=0,N
   70     TFOR(I,J) = TFOR(I,J) + TINV(K,I)*WORK(K,J)
   80 CONTINUE
      RETURN
      END
      SUBROUTINE VPROJ( M,P,F,IN,IP,NG,PG,WG,PROM,N,CON,W,FVBF,IERR )
C
C
C   PURPOSE
C
C       COMPUTES THE VBF REPRESENTATION OF A FUNCTION
C
C   ARGUMENTS
C
C       DIMENSION   P(M), F(M,4), PG(NG), WG(NG)
C                   PROM(0:N,0:N), CON(4), W(0:N), FVBF(0:N)
C
C       INPUT
C
C                   ************** DEFINITION OF FUNCTION **************
C
C           M       NUMBER OF PRESSURE LEVELS AT WHICH THE FUNCTION IS
C                   SPECIFIED (M  MUST BE AT LEAST 3)
C
C           P       ARRAY OF PRESSURE LEVELS AT WHICH THE FUNCTION IS
C                   SPECIFIED (MUST BE IN INCREASING ORDER, EXTENDING
C                   FROM THE TOP PRESSURE TO THE BOTTOM PRESSURE AS
C                   DEFINED IN THE CALL TO  VTSET)
C
C           F       ARRAY CONTAINING THE CORRESPONDING FUNCTION VALUES
C                   (FVAL(I,1)  IS THE VALUE AT  P(I), I = 1, ..., M)
C
C           IN      INTEGER SPECIFYING WHETHER OR NOT TO INTEGRATE:
C                       IN.GT.0    INTEGRATE THE FUNCTION WITH RESPECT
C                                  TO  -LOG(P)  BEFORE PROJECTING IT
C                                  (THE INTEGRAL IS ZERO AT P = PB)
C                       IN.LE.0    DO NOT INTEGRATE THE FUNCTION
C
C                   ************* DEFINITION OF PROJECTION *************
C                   THE FUNCTION IS PROJECTED USING A LEAST-SQUARES FIT
C                   IN THE NORM GENERATED BY THE DISCRETE INNER PRODUCT
C                     (U,V) = SUM (I=1 TO NG) OF WG(I)*U(PG(I))*V(PG(I))
C                   WHERE  PG  AND  WG  MAY BE SUPPLIED OR GENERATED.
C
C           IP      INTEGER SPECIFYING THE INNER PRODUCT DESIRED:
C                       IP = 1    CHEBYSHEV INNER PRODUCT
C                       IP = 2    VERTICAL INNER PRODUCT
C                       IP = 3    USER-SUPPLIED INNER PRODUCT
C                   ANY OTHER VALUE OF  IP  IMPLIES THAT THE PROJECTION
C                   WAS DEFINED IN A PREVIOUS CALL TO  VPROJ  AND THAT
C                   NG, PG, WG  AND  PROM  ARE UNCHANGED FROM THAT CALL.
C
C           NG      NUMBER OF GAUSSIAN PRESSURE LEVELS
C
C           PG      ARRAY FOR OR CONTAINING THE GAUSSIAN PRESSURE LEVELS
C                   (GENERATED BY  VPROJ  WHEN  IP = 1  OR  IP = 2)
C
C           WG      ARRAY FOR OR CONTAINING THE CORRESPONDING WEIGHTS
C                   (GENERATED BY  VPROJ  WHEN  IP = 1  OR  IP = 2)
C
C                   ********** EXAMPLES OF TYPICAL PROJECTIONS *********
C                   IP=1, NG.GE.2*N:  APPROXIMATE UNIFORM FIT
C                   IP=2, NG.GE.2*N:  CONTINUOUS LEAST-SQUARES FIT
C
C           PROM    ARRAY FOR OR CONTAINING THE PROJECTION MATRIX
C                   (GENERATED BY  VPROJ  WHEN  IP = 1, 2  OR  3)
C
C           N       SPECTRAL TRUNCATION (INDEX OF LAST VERTICAL MODE)
C
C           CON     VECTOR OF CONSTANTS PRODUCED BY  VTSET
C
C       WORK SPACE
C
C           W       REAL VECTOR OF LENGTH AT LEAST  N+1
C
C       OUTPUT
C
C           F       THE STORAGE LOCATIONS  F(I,J)  (I=1, ..., M)  FOR
C                   J = 1, 2, 3, 4  CONTAIN PARAMETERS DEFINING THE
C                   CUBIC SPLINE FIT TO THE FUNCTION THAT WAS PROJECTED,
C                   I.E., THE FUNCTION AS INPUT OR ITS INTEGRAL.
C
C           PG, WG  CONTAIN LEVELS AND WEIGHTS GENERATED (IP = 1  OR  2)
C
C           PROM    CONTAINS THE MATRIX GENERATED (IP = 1, 2  OR  3)
C
C           FVBF    VBF COEFFICIENTS OF THE FUNCTION:  FVBF(J)  IS
C                   THE COEFFICIENT OF VERTICAL BASIS FUNCTION  J
C                   IN THE VBF EXPANSION OF THE FUNCTION
C
C           IERR    INTEGER ERROR FLAG  (ZERO ON NORMAL RETURN)
C
C           NOTE:   UPON RETURN, THE CUBIC SPLINE FIT TO THE FUNCTION
C                   THAT WAS PROJECTED MAY BE EVALUATED AT ANY PRESSURE
C                   LEVEL  PL  AS    VALUE = FUNVAL( PL, MD, M, P, F ),
C                   WHERE  MD  IS THE DERIVATIVE DESIRED, E.G.  MD=0
C                   FOR THE VALUE, MD=1 FOR THE DERIVATIVE WITH RESPECT
C                   TO  P, ETC.).
C
C   METHOD
C
C       A CUBIC SPLINE INTERPOLATE OF THE FUNCTION IS SET UP (THIS IS
C       INTEGRATED IF REQUESTED) AND PROJECTED ONTO THE VERTICAL BASIS
C       FUNCTIONS USING A LEAST-SQUARES (GALERKIN) PROJECTION IN THE
C       SPECIFIED INNER PRODUCT.
C
C   ERROR CONDITIONS
C
C       IERR = 1    M  TOO SMALL  (M MUST BE AT LEAST  3)
C
C       IERR = 2    PRESSURE LEVELS NOT IN INCREASING ORDER
C
C       IERR = 3    MINIMUM AND MAXIMUM PRESSURES DO NOT MATCH THE
C                   TOP AND SURFACE PRESSURES DEFINED IN  VTSET
C
C
      INTEGER  M, IN, IP, NG, N, IERR
      REAL  P(M), F(M,4), PG(NG), WG(NG), PROM(0:N,0:N)
      REAL  CON(4), W(0:N), FVBF(0:N)
      INTEGER  I, IG, J, K
      REAL  DP, FACT, PB, PIBYNG, PT, WF
C
C   INITIALIZATIONS AND ARGUMENT CHECKS
C
      IERR = 0
      PT = CON(1)
      PB = CON(2)
      DP = CON(3)
      IF ( P(1).NE.PT .OR. P(M).NE.PB )  IERR = 3
      IF ( NG.LE.0 )  IERR = 4
      IF ( IERR.NE.0 )  RETURN
      IF ( IP.LT.1 .OR. IP.GT.3 )  GO TO 100
C
C ***** SET UP THE INNER PRODUCT AND ASSOCIATED PROJECTION MATRIX ******
C
C   COMPUTE THE ABSCISSAS AND WEIGHTS DEFINING THE INNER PRODUCT
C
      IF ( IP.EQ.1 )  THEN
          PIBYNG = ACOS( -1.0 )/NG
          DO 10 IG=1,NG
              PG(IG) = PB - DP*(1.0 + COS( (IG - 0.5)*PIBYNG ))/2
              WG(IG) = 1.0
   10     CONTINUE
      ELSE IF ( IP.EQ.2 )  THEN
          CALL GAUSSL( NG, PT, PB, PG, WG, IERR )
          IF ( IERR.NE.0 )  RETURN
          DO 20 IG=1,NG
   20     WG(IG) = WG(IG)/DP
      END IF
C
C   GENERATE THE PROJECTION MATRIX
C
      DO 30 I=0,N
      DO 30 J=I,N
   30 PROM(I,J) = 0.0
      DO 50 IG=1,NG
          CALL VBFVAL( PG(IG), 0, CON, N, W )
          DO 40 I=0,N
          DO 40 J=I,N
   40     PROM(I,J) = PROM(I,J) + WG(IG)*W(I)*W(J)
   50 CONTINUE
C
C   COMPUTE ITS CHOLESKY DECOMPOSITION
C
      DO 70 I=0,N
      DO 70 J=I,N
          FACT = PROM(I,J)
          DO 60 K=0,I-1
   60     FACT = FACT - PROM(I,K)*PROM(J,K)
          IF ( I.NE.J )  THEN
              PROM(J,I) = FACT/PROM(I,I)
          ELSE IF ( FACT.GT.0.0 )  THEN
              PROM(I,I) = SQRT( FACT )
          ELSE
              IERR = 8
              RETURN
          END IF
   70 CONTINUE
C
C ******************* CALCULATION OF THE PROJECTION ********************
C
C   COMPUTE THE RIGHT-HAND SIDE OF THE LINEAR SYSTEM
C
  100 CALL FUNSET( M, P, F, IN, CON, IERR )
      IF ( IERR.NE.0 )  RETURN
      DO 110 I=0,N
  110 FVBF(I) = 0.0
      DO 130 IG=1,NG
          CALL VBFVAL( PG(IG), 0, CON, N, W )
          WF = WG(IG)*FUNVAL( PG(IG), 0, M, P, F )
          DO 120 I=0,N
  120     FVBF(I) = FVBF(I) + WF*W(I)
  130     CONTINUE
C
C   SOLVE THE LINEAR SYSTEM FOR THE VBF COEFFICIENTS
C
      FVBF(0) = FVBF(0)/PROM(0,0)
      DO 150 I=1,N
          DO 140 J=0,I-1
  140     FVBF(I) = FVBF(I) - PROM(I,J)*FVBF(J)
          FVBF(I) = FVBF(I)/PROM(I,I)
  150 CONTINUE
      FVBF(N) = FVBF(N)/PROM(N,N)
      DO 170 I=N-1,0,-1
          DO 160 J=I+1,N
  160     FVBF(I) = FVBF(I) - PROM(J,I)*FVBF(J)
          FVBF(I) = FVBF(I)/PROM(I,I)
  170 CONTINUE
      RETURN
      END
      SUBROUTINE VTRAN( F, N, TMAT, G )
C
C
C   PURPOSE
C
C       COMPUTES A VERTICAL TRANSFORM OF A FUNCTION
C       BETWEEN ITS VBF AND SPECTRAL REPRESNETATIONS
C
C   ARGUMENTS
C
C       DIMENSION   F(0:N), TMAT(0:N,0:N), G(0:N)
C
C       INPUT
C
C           F       VECTOR CONTAINING INPUT COEFFICIENTS OF FUNCTION--
C                   FOR FORWARD TRANSFORM:  VBF      COEFFICIENTS  FVBF
C                   FOR INVERSE TRANSFORM:  SPECTRAL COEFFICIENTS  FHAT
C
C           N       SPECTRAL TRUNCATION (INDEX OF LAST VERTICAL MODE)
C
C           TMAT    TRANSFORM MATRIX PRODUCED BY  VTSET--
C                   FOR FORWARD TRANSFORM:  TFOR
C                   FOR INVERSE TRANSFORM:  TINV
C
C       OUTPUT
C
C           G       VECTOR CONTAINING OUTPUT COEFFICIENTS OF FUNCTION--
C                   FOR FORWARD TRANSFORM:  SPECTRAL COEFFICIENTS  FHAT
C                   FOR INVERSE TRANSFORM:  VBF      COEFFICIENTS  FVBF
C
C
      INTEGER  N, I, J
      REAL  F(0:N), TMAT(0:N,0:N), G(0:N)
C
      DO 20 I=0,N
          G(I) = 0.0
          DO 10 J=N,0,-1
   10     G(I) = G(I) + TMAT(I,J)*F(J)
   20 CONTINUE
      RETURN
      END
      SUBROUTINE VEVAL( FVBF, MD, M, P, CON, N, W, FVAL )
C
C
C   PURPOSE
C
C       EVALUATES THE VBF REPRESENTATION OF A FUNCTION
C
C   ARGUMENTS
C
C       DIMENSION   FVBF(0:N), P(M), CON(4), W(0:N,MD+1), FVAL(M,MD+1)
C
C       INPUT
C
C           FVBF    VBF COEFFICIENTS OF THE FUNCTION
C
C           MD      ORDER OF THE HIGHEST DERIVATIVE DESIRED:
C                       MD = 0    EVALUATE THE FUNCTION ITSELF
C                       MD = 1    EVALUATE THE FUNCTION AND DERIVATIVE
C
C           M       NUMBER OF OUTPUT PRESSURE LEVELS
C
C           P       ARRAY OF OUTPUT PRESSURE LEVELS (IN ANY ORDER)
C
C           CON     VECTOR OF CONSTANTS PRODUCED BY  VTSET
C
C           N       SPECTRAL TRUNCATION (INDEX OF LAST VERTICAL MODE)
C
C       WORK SPACE
C
C           W       REAL VECTOR OF LENGTH AT LEAST  (MD+1)*(N+1)
C
C       OUTPUT
C
C           FVAL    VECTOR CONTAINING THE VALUES REQUESTED:
C                       FVAL(I,1)  IS THE VALUE      AT  P(I)
C                       FVAL(I,2)  IS THE DERIVATIVE AT  P(I)  (IF MD=1)
C                   FOR  I = 1, ..., M
C   NOTE:  THE KTH COLUMN OF  TINV  CONSISTS OF THE VBF COEFFICIENTS OF
C          VERTICAL STRUCTURE FUNCTION  PSI(K),  SO THAT FUNCTION MAY BE
C          EVALUATED BY CALLING  VEVAL  WITH  FVBF = TINV(0,K).
C
C
      INTEGER  MD, M, N
      REAL  FVBF(0:N), P(M), CON(4), W(0:N,2), FVAL(M,2)
      INTEGER  I, J
C
C   EVALUATE THE VBF REPRESENTATION AT THE DESIRED  P  VALUES
C
      DO 30 J=1,M
          CALL VBFVAL( P(J), MD, CON, N, W )
          FVAL(J,1) = 0.0
          DO 10 I=N,0,-1
   10     FVAL(J,1) = FVAL(J,1) + FVBF(I)*W(I,1)
          IF ( MD.EQ.0 )  GO TO 30
          FVAL(J,2) = 0.0
          DO 20 I=N,0,-1
   20     FVAL(J,2) = FVAL(J,2) + FVBF(I)*W(I,2)
   30 CONTINUE
      RETURN
      END
      SUBROUTINE RRGSET( M, P, RT, IERR )
C
C   SETS UP THE TEMPERATURE AND STABILITY APPROXIMATIONS
C
      INTEGER  M, IERR
      REAL  P(M), RT(M,5)
      INTEGER  J, K, NDEG, NGAUSS
      REAL  DP, FG, KAPPA, PB, PG, PIBYNG, RGAMMA
      REAL  SG, TK, TKM1, TKM2, WT
      PARAMETER  ( KAPPA = 0.2859 )
      COMMON  /RRGCOM/ NDEG, NGAUSS
      SAVE    /RRGCOM/
      DATA  NDEG, NGAUSS / 0, 0 /
C
C   SET UP THE CUBIC SPLINE INTERPOLATE OF  RT
C
      IERR = 0
      CALL CSSET( M, P, RT, 3, 3, IERR )
      IF ( IERR.NE.0 )  RETURN
C
C   SET UP THE CHEBYSHEV POLYNOMIAL FIT TO  1/(R*GAMMA)
C
      IF ( NDEG.LT.0 )  THEN
          NDEG = ABS( NDEG )
      ELSE
          NDEG = M - 1
      END IF
      IF ( NGAUSS.LT.0 )  THEN
          NGAUSS = ABS( NGAUSS )
      ELSE
          NGAUSS = 2*NDEG
      END IF
      PB = P(M)
      DP = PB - P(1)
      DO 10 K=0,NDEG
   10 RT(K+1,5) = 0.0
      IF ( NGAUSS.LE.0 )  STOP
      PIBYNG = ACOS( -1.0 )/NGAUSS
      DO 30 J=1,NGAUSS
          SG = COS( (J - 0.5)*PIBYNG )
          PG = PB - DP*(SG + 1.0)/2
          RGAMMA = KAPPA*CSVAL( PG, 0, M, P, RT, J )
     2             -  PG*CSVAL( PG, 1, M, P, RT, 2 )
          IF ( RGAMMA.LE.0.0 )  THEN
              IERR = 5
              PRINT 9000, PG, RGAMMA
 9000         FORMAT('0ERROR IN  RRGSET--STABILITY NOT POSITIVE ',
     2               'AT  P =',1PE9.2,':  R*GAMMA =',E9.2/)
              RGAMMA = 1.0
          END IF
          FG = 1.0/RGAMMA
          TKM2 = 1.0
          TKM1 = SG
          RT(1,5) = RT(1,5) + FG
          RT(2,5) = RT(2,5) + FG*TKM1
          DO 20 K=2,NDEG
              TK = 2*SG*TKM1 - TKM2
              RT(K+1,5) = RT(K+1,5) + FG*TK
              TKM2 = TKM1
              TKM1 = TK
   20     CONTINUE
   30 CONTINUE
      IF ( IERR.NE.0 )  RETURN
      RT(1,5) = RT(1,5)/NGAUSS
      WT = 2.0/NGAUSS
      DO 40 K=1,NDEG
   40 RT(K+1,5) = WT*RT(K+1,5)
      RETURN
      END
      FUNCTION RRGVAL( PVAL, CON, M, RT, IERR )
C
C   EVALUATES THE CHEBYSHEV POLYNOMIAL FIT TO  1/(R*GAMMA)  AT  PVAL
C
      INTEGER  M, IERR
      REAL  RRGVAL, PVAL, CON(3), RT(M,5)
      INTEGER  K, NDEG, NGAUSS
      REAL  DP, PB, S, TK, TKM1, TKM2
      COMMON  /RRGCOM/ NDEG, NGAUSS
      SAVE    /RRGCOM/
C
      IERR = 0
      PB = CON(2)
      DP = CON(3)
      S = 2*(PB - PVAL)/DP - 1.0
      RRGVAL = RT(1,5) + RT(2,5)*S
      TKM2 = 1.0
      TKM1 = S
      DO 10 K=2,NDEG
          TK = 2*S*TKM1 - TKM2
          RRGVAL = RRGVAL + RT(K+1,5)*TK
          TKM2 = TKM1
          TKM1 = TK
   10 CONTINUE
      IF ( RRGVAL.GT.0.0 )  RETURN
      IERR = 5
      PRINT 9000, PVAL, RRGVAL
 9000 FORMAT('0ERROR IN  RRGVAL--STABILITY NOT POSITIVE ',
     2       'AT  P =',1PE9.2,':  1/(R*GAMMA) =',E9.2/)
      RETURN
      END
      SUBROUTINE FUNSET( M, P, F, IN, CON, IERR )
C
C   SETS UP A CONTINUOUS APPROXIMATION TO A FUNCTION GIVEN DISCRETELY
C
      INTEGER  M, IN, IERR
      REAL  P(M), F(M,4), CON(4)
      INTEGER  I
      REAL  A0, A1, A2, A3, BETA, D0, D1, D2, D3, PB, PT, SLOPE1, SLOPEN
C
C   PRELIMINARIES
C
      IERR = 0
      PT   = CON(1)
      PB   = CON(2)
      BETA = CON(4)
      IF ( P(1).NE.PT .OR. P(M).NE.PB )  IERR = 3
      IF ( IERR.NE.0 )  RETURN
      IF ( IN.LE.0 )  GO TO 30
C
C   INTEGRATE THE FUNCTION WITH RESPECT TO  -LOG(P)
C
      CALL CSSET( M, P, F, 3, 3, IERR )
      IF ( IERR.NE.0 )  RETURN
      SLOPE1 = -F(1,1)/PT
      SLOPEN = -F(M,1)/PB
      F(M,1) = 0.0
      DO 10 I=M-1,1,-1
          A0 = F(I,1) - P(I)*(F(I,2)-P(I)*(F(I,3)/2.0-P(I)*F(I,4)/6.0))
          A1 = F(I,2) - P(I)*(F(I,3) - P(I)*F(I,4)/2.0)
          A2 = (F(I,3) - P(I)*F(I,4))/4.0
          A3 = F(I,4)/18.0
          D0 = ALOG( P(I+1)/P(I) )
          D1 = P(I+1)    - P(I)
          D2 = P(I+1)**2 - P(I)**2
          D3 = P(I+1)**3 - P(I)**3
          F(I,1) = F(I+1,1) + A0*D0 + A1*D1 + A2*D2 + A3*D3
   10 CONTINUE
C
C   SET UP THE INTERPOLATE AND ADD IN THE CONSTANT OF INTEGRATION
C
      F(1,2) = SLOPE1
      F(M,2) = SLOPEN
      CALL CSSET( M, P, F, 1, 1, IERR )
      A0 = -CSVAL( PB, 0, M, P, F, 0 )
      DO 20 I=1,M
   20 F(I,1) = F(I,1) + A0
      RETURN
C
C   SET UP THE CUBIC SPLINE INTERPOLATE WITHOUT INTEGRATING
C
   30 F(1,2) = 0.0
      F(M,2) = -BETA*F(M,1)/PB
      CALL CSSET( M, P, F, 1, 1, IERR )
      RETURN
      END
      FUNCTION FUNVAL( PVAL, MD, M, P, F )
      INTEGER  MD, M
      REAL  FUNVAL, PVAL, P(M), F(M,4)
C
      FUNVAL = CSVAL( PVAL, MD, M, P, F, 0 )
      RETURN
      END
      SUBROUTINE VBFVAL( PVAL, MD, CON, N, CHI )
C
C   EVALUATES VERTICAL BASIS FUNCTIONS:  CHEBYSHEV POLYNOMIALS W/B.C.'S
C
      INTEGER  MD, N
      REAL  PVAL, CON(4), CHI(0:N,0:1)
      INTEGER  J
      REAL  A, B, BETA, DP, FACT, PB, PT, RM1J, S, TJ, TJP1, TJP2
C
      PT   = CON(1)
      PB   = CON(2)
      DP   = CON(3)
      BETA = CON(4)
      S  = 2*(PB - PVAL)/DP - 1.0
      IF ( BETA.EQ.0.0 )  STOP
      FACT = 2*PB/(BETA*DP)
      TJ   = 1.0
      TJP1 = S
      RM1J = 1.0
      DO 30 J=0,N
          TJP2 = 2*S*TJP1 - TJ
          B = (J+2)**2
          A = RM1J + B*(1.0 + FACT*(1.0 + RM1J))
          CHI(J,0) = TJP2 - A - B*S
          IF ( MD.LE.0 )  GO TO 20
          IF ( ABS( S ).LT.1.0 .AND. PT.LT.PVAL .AND. PVAL.LT.PB )  THEN
              CHI(J,1) = -(2/DP)*((J+2)*(TJP1 - S*TJP2)/(1.0 - S*S) - B)
          ELSE IF ( (S.LE.-1.0.OR.PVAL.GE.PB) .AND. MOD(J,2).EQ.0 ) THEN
              CHI(J,1) = 4*B/DP
          ELSE
              CHI(J,1) = 0.0
          END IF
   20     TJ   = TJP1
          TJP1 = TJP2
          RM1J = -RM1J
   30 CONTINUE
      RETURN
      END
      SUBROUTINE CSSET( N, X, F, IBC1, IBCN, IERR )
C
C
C   PURPOSE
C
C       SETS UP A CUBIC SPLINE TO INTERPOLATE SPECIFIED DATA
C
C   ARGUMENTS
C
C       DIMENSION   X(N), F(N,4)
C
C       INPUT
C
C           N       NUMBER OF DATA POINTS  (N.GE.2)
C
C           X       ABSCISSAS (IN INCREASING ORDER)
C
C           F       ON INPUT,  F(I,1)  CONTAINS THE ORDINATE
C                   CORRESPONDING TO  X(I)  (I=1, ..., N).
C                   WITH SOME BOUNDARY CONDITIONS, ADDITIONAL
C                   INFORMATION MUST BE SUPPLIED IN  F(1,2)
C                   AND/OR  F(N,2)  AS DESCRIBED BELOW.
C
C           IBC1,   INTEGERS SPECIFYING THE BOUNDARY CONDITIONS
C           IBCN    TO BE APPLIED AT  X(1)  AND  X(N), RESPECTIVELY.
C                   IBC1 (IBCN)  IS INTERPRETED AS FOLLOWS:
C                       VALUE    CONDITION
C                         1    FIRST DERIVATIVE AT ENDPOINT SUPPLIED
C                              IN  F(1,2)  (F(N,2))
C                         2    SECOND DERIVATIVE AT ENDPOINT SUPPLIED
C                              IN  F(1,2)  (F(N,2))
C                         3    'NOT-A-KNOT' CONDITION:  CONTINUITY
C                              OF THE THIRD DERIVATIVE IMPOSED AT
C                              X(2)  (X(N-1)) --REQUIRES  N.GE.3
C                         4    SLOPE AT ENDPOINT ESTIMATED BY FITTING
C                              A CUBIC POLYNOMIAL TO THE FIRST (LAST)
C                              FOUR DATA POINTS--REQUIRES  N.GE.4
C
C       OUTPUT
C
C           F       CONTAINS THE POLYNOMIAL COEFFICIENTS OF THE CUBIC
C                   SPLINE.  THE INPUT VALUES  F(I,1)  (I=1, ..., N)
C                   REMAIN UNCHANGED.
C
C           IERR    ERROR FLAG  (ZERO ON NORMAL RETURN)
C
C   ERROR CONDITIONS
C
C       IERR = 1    N  TOO SMALL FOR CHOICE OF BOUNDARY CONDITIONS
C       IERR = 2    ABSCISSAS NOT IN INCREASING ORDER
C
C   USE
C
C       FIRST CALL  CSSET  TO SET UP THE CUBIC SPLINE.  THEN USE
C       THE FUNCTION  CSVAL  TO EVALUATE THE SPLINE OR ANY OF ITS
C       DERIVATIVES AS DESIRED.
C
C   METHOD
C
C       A TRIDIAGONAL SYSTEM IS SET UP FROM THE REQUIREMENT OF
C       CONTINUITY OF THE SECOND DERIVATIVE AT THE INTERIOR
C       BREAKPOINTS PLUS THE BOUNDARY CONDITIONS.  THE SYSTEM IS
C       SOLVED BY GAUSSIAN ELIMINATION FOR THE FIRST DERIVATIVES
C       AT THE BREAKPOINTS, FROM WHICH THE COEFFICIENTS OF THE
C       CUBIC SPLINE AS A PIECEWISE POLYNOMIAL ARE OBTAINED.
C
C   HISTORY
C
C       WRITTEN BY SCOTT R. FULTON (FEBRUARY, 1982)
C       BASED ON THE ROUTINE  CUBSPL  BY CARL DEBOOR
C
C   REFERENCE
C
C       DEBOOR, CARL (1978):  A PRACTICAL GUIDE TO SPLINES.
C               SPRINGER-VERLAG, NEW YORK, 392 PP.
C
C
      INTEGER  N, IBC1, IBCN, IERR, I, JBC1, JBCN
      REAL  X(N), F(N,4), DD(3), FACT
C
C   ARGUMENT CHECKS
C
      IERR = 0
      JBC1 = IBC1
      JBCN = IBCN
      IF ( IBC1.LT.1 .OR. IBC1.GT.4 )  JBC1 = 3
      IF ( IBCN.LT.1 .OR. IBCN.GT.4 )  JBCN = 3
      IF ( N.LT.MAX( 2 , JBC1 , JBCN ) )  THEN
          IERR = 1
          RETURN
      END IF
      DO 10 I=2,N
          IF ( X(I-1).GE.X(I) )  THEN
              IERR = 2
              RETURN
          END IF
   10 CONTINUE
C
C   COMPUTE  X  DIFFERENCES AND FIRST DIVIDED DIFFERENCES OF  F
C
      DO 20 I=2,N
          F(I,3) = X(I) - X(I-1)
          F(I,4) = (F(I,1) - F(I-1,1))/F(I,3)
   20 CONTINUE
C
C   SET UP FIRST EQUATION FROM THE BOUNDARY CONDITION AT  X(1)
C
      IF ( JBC1.EQ.1 )  THEN
          F(1,4) = 1.0
          F(1,3) = 0.0
      ELSE IF ( JBC1.EQ.2 )  THEN
          F(1,4) = 2.0
          F(1,3) = 1.0
          F(1,2) = 3.0*F(2,4) - F(2,3)*F(1,2)/2.0
      ELSE IF ( JBC1.EQ.3 )  THEN
          F(1,4) = F(3,3)
          F(1,3) = F(2,3) + F(3,3)
          F(1,2) = ( F(3,3)*(F(2,3) + 2.0*F(1,3))*F(2,4)
     2             + F(2,3)*F(2,3)*F(3,4) )/F(1,3)
      ELSE
          F(1,4) = 1.0
          F(1,3) = 0.0
          DD(2) = (F(3,4) - F(2,4))/(F(2,3) + F(3,3))
          DD(3) = (F(4,4) - F(3,4))/(F(3,3) + F(4,3))
          DD(3) = ( DD(3) - DD(2) )/(F(2,3) + F(3,3) + F(4,3))
          F(1,2) = F(2,4) - F(2,3)*(DD(2) - (F(2,3)+F(3,3))*DD(3))
      END IF
C
C   SET UP EQUATIONS FOR CONTINUITY OF SECOND DERIVATIVE AT INTERIOR
C   BREAKPOINTS  X  AND DO FORWARD PASS OF GAUSSIAN ELIMINATION
C
      DO 30 I=2,N-1
          FACT = -F(I+1,3)/F(I-1,4)
          F(I,2) = FACT*F(I-1,2) + 3.0*(F(I+1,3)*F(I,4)+F(I,3)*F(I+1,4))
          F(I,4) = FACT*F(I-1,3) + 2.0*(F(I,3) + F(I+1,3))
   30 CONTINUE
C
C   SET UP LAST EQUATION FROM THE BOUNDARY CONDITION AT  X(N)
C   AND COMPLETE FORWARD PASS OF GAUSSIAN ELIMINATION
C
      IF ( JBCN.EQ.2 )  THEN
          F(N,2) = 3.0*F(N,4) + F(N,3)*F(N,2)/2.0
          FACT   = -1.0/F(N-1,4)
          F(N,4) =  FACT*F(N-1,3) + 2.0
          F(N,2) = (FACT*F(N-1,2) + F(N,2))/F(N,4)
      ELSE IF ( JBCN.EQ.3 )  THEN
          FACT   =  F(N-1,3) + F(N,3)
          DD(1)  = (F(N-1,1) - F(N-2,1))/F(N-1,3)
          F(N,2) = ( F(N-1,3)*(F(N,3) + 2.0*FACT)*F(N,4)
     2             + F(N,3)*F(N,3)*DD(1) )/FACT
          FACT   = -FACT/F(N-1,4)
          F(N,4) = (FACT + 1.0)*F(N-1,3)
          F(N,2) = (FACT*F(N-1,2) + F(N,2))/F(N,4)
      ELSE IF ( JBCN.EQ.4 )  THEN
          DD(3) = (F(N-2,1) - F(N-3,1))/F(N-2,3)
          DD(2) = (F(N-1,1) - F(N-2,1))/F(N-1,3)
          DD(3) = ( DD(2) - DD(3))/(F(N-2,3) + F(N-1,3))
          DD(2) = (F(N,4) - DD(2))/(F(N-1,3) + F(N  ,3))
          DD(3) = ( DD(2) - DD(3))/(F(N-2,3) + F(N-1,3) + F(N,3))
          F(N,2) = F(N,4) + F(N,3)*(DD(2) + (F(N-1,3)+F(N,3))*DD(3))
      END IF
C
C   DO BACKWARD PASS OF GAUSSIAN ELIMINATION
C
      DO 40 I=N-1,1,-1
   40 F(I,2) = (F(I,2) - F(I,3)*F(I+1,2))/F(I,4)
C
C   COMPUTE POLYNOMIAL COEFFICIENTS OF THE CUBIC SPLINE
C
      DO 50 I=2,N
          FACT  =  F(I,3)
          DD(1) = (F(I,1) - F(I-1,1))/FACT
          DD(3) =  F(I-1,2) + F(I,2) - 2.0*DD(1)
          F(I-1,3) = 2.0*(DD(1) - F(I-1,2) - DD(3))/FACT
          F(I-1,4) = 6.0*DD(3)/(FACT*FACT)
   50 CONTINUE
      RETURN
      END
      FUNCTION CSVAL( XVAL, MD, N, X, F, ISW )
C
C
C   PURPOSE
C
C       EVALUATES THE CUBIC SPLINE SET UP BY THE SUBROUTINE  CSSET
C
C   ARGUMENTS
C
C       DIMENSION   X(N), F(N,4)
C
C       INPUT
C
C           XVAL    ABSCISSA AT WHICH THE SPLINE IS TO BE EVALUATED
C
C           MD      INTEGER SPECIFYING THE DERIVATIVE DESIRED:
C                       MD = 0    SPLINE VALUE
C                       MD = 1    FIRST  DERIVATIVE
C                       MD = 2    SECOND DERIVATIVE
C                       MD = 3    THIRD  DERIVATIVE
C
C           N,X,F   UNCHANGED FROM CALL TO  CSSET
C
C           ISW     INTEGER SWITCH TO HELP LOCATE THE INTERVAL
C                   CONTAINING  XVAL:
C                       ISW.GT.0    ASCENDING SEARCH
C                       ISW.EQ.0    BISECTION SEARCH
C                       ISW.LT.0    DESCENDING SEARCH
C                   IF  ISW = +1 (-1), THE SEARCH STARTS WITH THE
C                   FIRST (LAST) INTERVAL.  THUS WHEN INTERPOLATING
C                   AT AN INCREASING (DECREASING) SEQUENCE OF
C                   POINTS  XVAL = Y(J)  (J=1, ..., K), SET
C                   ISW = +J (-J)  FOR MAXIMUM EFFICIENCY.
C
C       OUTPUT
C
C           CSVAL   RETURNS THE REQUESTED SPLINE VALUE OR
C                   DERIVATIVE.  EXTRAPOLATION IS USED WHEN  XVAL
C                   IS OUTSIDE THE INTERVAL  (X(1),X(N)),  AND THE
C                   THIRD DERIVATIVE IS TAKEN TO BE CONTINUOUS
C                   FROM THE RIGHT AT THE BREAKPOINTS.
C
C   USE
C
C       FIRST CALL  CSSET  TO SET UP THE CUBIC SPLINE.  THEN USE
C       THE FUNCTION  CSVAL  TO EVALUATE THE SPLINE OR ANY OF ITS
C       DERIVATIVES AS DESIRED.
C
C   METHOD
C
C       AN INDEX  I  IS DETERMINED AS DESCRIBED ABOVE SUCH THAT
C       X(I).LE.XVAL.LT.X(I+1).  THE DESIRED VALUE IS THEN OBTAINED
C       USING THE POLYNOMIAL REPRESENTATION OF THE CUBIC SPLINE
C       ON THAT INTERVAL.
C
C   HISTORY
C
C       WRITTEN BY SCOTT R. FULTON (FEBRUARY, 1982)
C       BASED ON THE ROUTINE  PPVALU  BY CARL DEBOOR
C
C   REFERENCE
C
C       DEBOOR, CARL (1978):  A PRACTICAL GUIDE TO SPLINES.
C               SPRINGER-VERLAG, NEW YORK, 392 PP.
C
C
      INTEGER  MD, N, ISW, I, IH, IM, J, K
      REAL  CSVAL, XVAL, X(N), F(N,4), DX, FACT
      SAVE  I
      DATA  I / 1 /
C
C   RETURN ZERO FOR FOURTH- AND HIGHER-ORDER DERIVATIVES
C
      J = MAX( MD+1 , 1 )
      IF ( J.GT.4 )  THEN
          CSVAL = 0.0
          RETURN
      END IF
C
C   FIND THE  X  INTERVAL CONTAINING  XVAL
C
      IF ( ISW )  10, 30, 80
C
C   1. DESCENDING SEARCH
C
   10 I = MAX( I, 1 )
      I = MIN( I, N-1 )
      IF ( ISW.EQ.-1 .OR. XVAL.GE.X(I+1) )  I = N-1
      I = I+1
   20 I = I-1
      IF ( X(I).GT.XVAL .AND. I.GT.1 )  GO TO 20
      GO TO 100
C
C   2. BISECTION SEARCH
C
   30 I  = 1
      IH = N
   40 IF ( IH-I.LE.1 )  GO TO 100
      IM = (I + IH)/2
      IF ( XVAL - X(IM) )  50, 60, 70
   50 IH = IM
      GO TO 40
   60 I  = IM
      IH = IM
      GO TO 40
   70 I = IM
      GO TO 40
C
C   3. ASCENDING SEARCH
C
   80 I = MAX( I, 1 )
      I = MIN( I, N-1 )
      IF ( ISW.EQ.+1 .OR. X(I).GT.XVAL )  I = 1
      I = I-1
   90 I = I+1
      IF ( XVAL.GE.X(I+1) .AND. I+1.LT.N )  GO TO 90
C
C   EVALUATE THE CUBIC SPLINE
C
  100 CSVAL = F(I,4)
      IF ( J.EQ.4 )  RETURN
      FACT = 4-J
      DX = XVAL - X(I)
      DO 200 K=3,J,-1
          CSVAL = F(I,K) + DX*CSVAL/FACT
          FACT  = FACT - 1.0
  200 CONTINUE
      RETURN
      END
      SUBROUTINE GAUSSL( N, XA, XB, AB, WT, IERR )
C
C   ABSCISSAS AND WEIGHTS FOR  N POINT GAUSSIAN QUADRATURE ON (XA,XB)
C   INPUT ARGUMENTS:
C       N     THE NUMBER OF GAUSS-LEGENDRE POINTS DESIRED
C       XA    THE LEFT  ENDPOINT OF THE INTERVAL OF INTEGRATION
C       XB    THE RIGHT ENDPOINT OF THE INTERVAL OF INTEGRATION
C   OUTPUT ARGUMENTS:
C       AB    THE  N  CALCULATED ABSCISSAS
C       WT    THE  N  CALCULATED WEIGHTS
C       IERR  SET TO  9  IF THERE IS AN ERROR (ZERO ON NORMAL RETURN)
C   SOURCE: NATIONAL CENTER FOR ATMOSPHERIC RESEARCH (SLIGHTLY MODIFIED)
C
      INTEGER  N, IERR
      REAL  XA, XB, AB(N), WT(N)
      INTEGER  I, K, M, MAXIT, NNP1
      REAL  B, BISQ, COND, C1, C2, C3, C4, PI, ROOTBF, TOL, U
      DOUBLE PRECISION  DDIF, DDIFX, DP, DPM1, DPM2, DPPR, DPROD
      DOUBLE PRECISION  DP2PRI, DRAT, DSUM, DTMP, DZERI, DZERO
C
C   MAXIMUM NUMBER OF ITERATIONS BEFORE GIVING UP ON CONVERGENCE
C
      PARAMETER  ( MAXIT = 5)
C
C   MACHINE DEPENDENT CONSTANTS:
C       TOL     CONVERGENCE CRITERION FOR DOUBLE PRECISION ITERATION
C       C1  )
C       C2  )   COEFFICIENTS IN MCMAHON'S EXPANSIONS OF THE  KTH  ZERO
C       C3  )   OF THE BESSEL FUNCTION J0(X) (CF. ABRAMOWITZ AND STEGUN)
C       C4  )
C
      PARAMETER  ( TOL = 1.0E-22, C1 = 1.0/8, C2 = -31.0/(2*3*8**2) )
      PARAMETER  ( C3 = 3779.0/(2*3*5*8**3), C4 = -6277237/(3*5*7*8**5))
C
C   ARITHMETIC STATEMENT FUNCTION FOR CONVERTING INTEGER TO DOUBLE
C
      DBLI(INTEGR) = DBLE(FLOAT(INTEGR))
C
      IERR = 0
      IF ( N.LT.1 )  RETURN
      DDIF = .5D0*(DBLE(XB) - DBLE(XA))
      DSUM = .5D0*(DBLE(XB) + DBLE(XA))
      IF ( N.EQ.1 )  THEN
          AB(1) = DSUM
          WT(1) = 2.*DDIF
          RETURN
      END IF
      PI = ACOS( -1.0 )
      U = (1.0 - (2.0/PI)**2)/4.0
      COND = 1.0/SQRT( (0.5+FLOAT(N))**2 + U )
      NNP1 = N*(N+1)
C
      DO 40 K=1,N/2
          B = (FLOAT(K)-0.25)*PI
          BISQ = 1.0/(B*B)
C
C       ROOTBF APPROXIMATES THE KTH ZERO OF THE BESSEL FUNCTION J0(X)
C
          ROOTBF = B*(1.0 + BISQ*(C1 + BISQ*(C2 + BISQ*(C3 + BISQ*C4))))
C
C       INITIAL GUESS FOR KTH ROOT OF LEGENDRE POLY P-SUB-N(X)
C
          DZERO = COS( ROOTBF*COND )
          DO 20 I=1,MAXIT
C
C           RECURSION RELATION FOR LEGENDRE POLYNOMIALS
C
              DPM2 = 1.0D0
              DPM1 = DZERO
              DO 10 M=2,N
                 DP = (DBLI(2*M-1)*DZERO*DPM1 - DBLI(M-1)*DPM2)/DBLI(M)
                 DPM2 = DPM1
                 DPM1 = DP
   10         CONTINUE
              DTMP = 1.0D0/(1.0D0 - DZERO*DZERO)
              DPPR = DBLI(N)*(DPM2 - DZERO*DP)*DTMP
              DP2PRI = (2.0D0*DZERO*DPPR - DBLI(NNP1)*DP)*DTMP
              DRAT = DP/DPPR
C
C           CUBICALLY-CONVERGENT ITERATIVE IMPROVEMENT OF ROOT
C
              DZERI = DZERO - DRAT*(1.0D0 + DRAT*DP2PRI/(2.0D0*DPPR))
              IF ( ABS(SNGL(DZERI - DZERO)).LE.TOL )  GO TO 30
              DZERO = DZERI
   20         CONTINUE
              IERR = 9
   30     CONTINUE
          DDIFX = DDIF*DZERO
          AB(K) = DSUM-DDIFX
          WT(K) = 2.D0*(1.D0 - DZERO*DZERO)/(DBLI(N)*DPM2)**2*DDIF
          I = N - K + 1
          AB(I) = DSUM + DDIFX
          WT(I) = WT(K)
   40 CONTINUE
      IF ( MOD(N,2).EQ.0 )  RETURN
      AB(N/2+1) = DSUM
      DPROD = N
      DO 50 K=1,N-1,2
   50 DPROD = DBLI(N-K-1)*DPROD/DBLI(N-K)
      WT(N/2+1) = 2.D0/DPROD**2*DDIF
      RETURN
      END
