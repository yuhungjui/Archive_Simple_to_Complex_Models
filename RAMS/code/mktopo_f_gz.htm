<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0080)http://bridge.atmet.org/cgi-bin/mktopo.f.gz?usrid=jpchen&epassw=40ed82400974b2c2 -->
<HTML><HEAD>
<META http-equiv=Content-Type content="text/html; charset=big5">
<META content="MSHTML 6.00.2900.2627" name=GENERATOR></HEAD>
<BODY><PRE>!
! Copyright (C) 1991-2003  ; All Rights Reserved ; ATMET, LLC
! 
! This file is free software; you can redistribute it and/or modify it under the
! terms of the GNU General Public License as published by the Free Software 
! Foundation; either version 2 of the License, or (at your option) any later version.
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY 
! WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE.  See the GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License along with this 
! program; if not, write to the Free Software Foundation, Inc., 
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!======================================================================================

      PROGRAM MAKE_TOPO
      DIMENSION TOPO(8,10),SCR(100)
      offlat=0.
      offlon=0.
      DO J=1,10
         DO I=1,8
            TOPO(I,J)=I*J
         ENDDO
      ENDDO
      CALL MKTOPO(8,10,TOPO,-110,40,1.,2,'T',SCR,offlat,offlon)

      END
      
C-----------------------------------------------------------------
C      Subroutine to make topography files consistent with RAMS
C       version 2c model. The routine will take a lat-lon array
C       of topography heights and reformat it into several smaller
C       files for input into the model. The same routine can also
C       be used for input land percentage.
C-----------------------------------------------------------------
C
C      Input parameters:
C
C         NX     - Number of x (longitude) gripoints in input array (TOPO) 
C         NY     - Number of y (latitude) gripoints in input array (TOPO) 
C         TOPO   - Input latitude-logitude array of topography heights 
C                  in meters.
C         IWLON  - West longitude of TOPO (-180 to 180 degrees)
C         ISLAT  - South latitude of TOPO (-90 to 90 degrees)
C         TRES   - TOPO resolution in degrees
C         IBLSIZE- Size in degrees of output files (they will have the
C                  same number of points in x and y.
C         FPREF  - File name prefix for output files (can include path)
C         SCR    - Scratch array of at least (IBLSIZE/TRES+1)**2
C
C     Note that IWLON, ISLAT, and IBLSIZE are all integers.
C-------------------------------------------------------------------------
   
      SUBROUTINE MKTOPO(NX,NY,TOPO,IWLON,ISLAT,TRES,IBLSIZE,FPREF,SCR
     +    ,offlat,offlon)
      CHARACTER*(*) FPREF
      DIMENSION TOPO(NX,NY),SCR(*)
      CHARACTER*80 TITLE1,TITLE2,TITLE3

      IBLDIM=INT(FLOAT(IBLSIZE)/TRES+.001)+1

      NSQX=NX/(IBLDIM-1)
      NSQY=NY/(IBLDIM-1)
cccccccccccc
            WRITE(TITLE1,'(A1)')'HEADER'
            TITLE3=FPREF(1:NBL)//TITLE1(1:6)
            OPEN(29,STATUS='NEW',FILE=TITLE3,FORM='FORMATTED')
            PRINT*, 'Making file-',TITLE3
            WRITE(29,14)IBLSIZE,IBLDIM,ISLAT,IWLON,offlat,offlon
 14         FORMAT(4I5,2f10.6)
            CLOSE(29)
cccccccccccc
      DO 1 NSX=1,NSQX
         DO 2 NSY=1,NSQY
            I=(NSX-1)*(IBLDIM-1)+1
            J=(NSY-1)*(IBLDIM-1)+1
            LAT=ISLAT+(NSY-1)*IBLSIZE
            LON=IWLON+(NSX-1)*IBLSIZE

            LATT=ABS(LAT)/10
            LATO=ABS(LAT)-LATT*10
            LONH=ABS(LON)/100
            LONT=(ABS(LON)-LONH*100)/10
            LONO=ABS(LON)-LONH*100-LONT*10

            IF(LAT.GE.0)THEN
               WRITE(TITLE1,'(2I1,A1)')LATT,LATO,'N'
            ELSE
               WRITE(TITLE1,'(2I1,A1)')LATT,LATO,'S'
            ENDIF
            IF(LON.GE.0)THEN
               WRITE(TITLE2,'(3I1,A1)')LONH,LONT,LONO,'E'
            ELSE
               WRITE(TITLE2,'(3I1,A1)')LONH,LONT,LONO,'W'
            ENDIF

            NBL=INDEX(FPREF,' ')-1
            IF(NBL.EQ.-1) NBL=LEN(FPREF)
            TITLE3=FPREF(1:NBL)//TITLE1(1:3)//TITLE2(1:4)
            PRINT*, NSX,NSY,i,j,LAT,LON
            PRINT*, 'Making file-',TITLE3
            
            NPT=1
            DO 10 JJ=J,(IBLDIM-1)+J
               DO 11 II=I,(IBLDIM-1)+I
                  SCR(NPT)=TOPO(II,JJ)
                  NPT=NPT+1
 11            CONTINUE
 10         CONTINUE

            OPEN(29,STATUS='NEW',FILE=TITLE3,FORM='FORMATTED')
            CALL VFOREC(29,SCR,IBLDIM*IBLDIM,12,SCR,'LIN')
            CLOSE(29)
 2       CONTINUE
 1    CONTINUE
C
      END
C
      subroutine vfinit
      character*1 vc, vcscr(0:63)
      common/vform/vc(0:63)
      data vcscr/'0','1','2','3','4','5','6','7','8','9'
     +          ,'A','B','C','D','E','F','G','H','I','J'
     +          ,'K','L','M','N','O','P','Q','R','S','T'
     +          ,'U','V','W','X','Y','Z','a','b','c','d'
     +          ,'e','f','g','h','i','j','k','l','m','n'
     +          ,'o','p','q','r','s','t','u','v','w','x'
     +          ,'y','z','{','|'/

      do 10 n=0,63
         vc(n)=vcscr(n)
  10  continue

      return
      end
      
c---------------------------------------------------------

      subroutine vctran(iun1,iun2,type)
      character*78 line,type*(*)

      read(iun1,'(a78)') line
      write(iun2,'(a78)') line
      
      if(type.eq.'C') then
         read(line,'(i8)') n
         nlines=n/78+1
      elseif(type.eq.'I'.or.type.eq.'F') then
         read(line,'(2i8)')n,nbits
         nlines=(n*nbits/6-1)/78+1
      endif
      
      do 10 nl=1,nlines
         read(iun1,'(a78)') line
         write(iun2,'(a78)') line
 10   continue
      
      return
      end
      
c--------------------------------------------------------

      subroutine vcorec(iunit,a,n)
      character*1 a(1)

      write(iunit,11)n
 11   format(i8)

      do 10 nc=1,n,78
         ne=min(n,nc+78)
         write(iunit,'(78a1)') (a(i),i=nc,ne)
 10   continue
      
      return
      end
      
c--------------------------------------------------------

      subroutine vcirec(iunit,a,n)
      character*1 a(1)

      read(iunit,11)nn
 11   format(i8)
      
      if(nn.ne.n) then
         print*,' Character count mismatch on vcirec record '
         print*,' Characters on record - ',nn
         print*,' Characters expected  - ',n
         stop 'vcirec'
      endif

      do 10 nc=1,n,78
         ne=min(n,nc+78)
         read(iunit,'(78a1)') (a(i),i=nc,ne)
 10   continue
      
      return
      end
      
c--------------------------------------------------------

      subroutine vforec(iunit,a,n,nbits,scr,type)
      double precision  bias, fact
      dimension a(*),scr(*)
      character*(*) type
      character*1 vc
      common/vform/vc(0:63)
c
      if(vc(0).ne.'0') call vfinit
c
c        log scaling assumes range of +/- 10e10
c
      call cscale(a,n,amin,amax)
      bias=dble(-amin+1.e-20)
      call cfact(bias,amax,nbits,fact)
      sbias=sngl(bias)
      sfact=sngl(fact)
c      print*,' amin,amax = ',amin,amax
c      print*,' bias,fact = ',bias,fact
      
      write(iunit,10)n,nbits,bias,fact
 10   format(2i8,2e20.10)
      call vwrt(iunit,a,n,bias,fact,nbits,scr,type)

      return
      end
      
c--------------------------------------------------------

      subroutine vwrt(iunit,a,n,bias,fact,nbits,scr,type)
      double precision  bias, fact
      character*(*) type
      character*1 vc
      common/vform/vc(0:63)
      dimension a(n),scr(n)
      character line*80,form*5

      if(type.eq.'LIN') then
         do 10 i=1,n
            scr(i)=sngl( ( dble(a(i))+bias ) *fact )
 10      continue
      elseif(type.eq.'LOG') then
         scfct=2.**(nbits-1)
         do 11 i=1,n
            scr(i)=(sign(1.,a(i))*(log10(max(1.e-10,abs(a(i))))+10.)
     +           /20.+1.)*scfct
 11      continue
      endif

      nvalline=(78*6)/nbits
      nchs=nbits/6
      do 20 i=1,n,nvalline
         ic=0
         do 30 ii=i,i+nvalline-1
            if(ii.gt.n) go to 31
            isval=int(scr(ii))
            do 40 iii=1,nchs
               iscr=iand(ishft(isval,-6*(nchs-iii)),63)
               ic=ic+1
               line(ic:ic)=vc(iscr)
 40         continue
 30      continue
 31      continue
         write(form,100) ic
         write(iunit,form) line(1:ic)
 20   continue                 

 100  format('(a',i2,')')

      return
      end
      
c--------------------------------------------------------

      subroutine vfirec(iunit,a,n,type)
      character*1 vc
      character*(*) type
      common/vform/vc(0:63)
      character line*80, cs*1
      dimension a(*)

      if(vc(0).ne.'0') call vfinit

      ich0=ichar('0')
      ich9=ichar('9')
      ichcz=ichar('Z')
      ichlz=ichar('z')
      ichca=ichar('A')
      ichla=ichar('a')
      
      read(iunit,10)nn,nbits,bias,fact
 10   format(2i8,2e20.10)
      if(nn.ne.n) then
         print*,' Word count mismatch on vfirec record '
         print*,' Words on record - ',nn
         print*,' Words expected  - ',n
         stop 'vfirec'
      endif

      nvalline=(78*6)/nbits
      nchs=nbits/6
      do 20 i=1,n,nvalline
         read(iunit,'(a78)') line
         ic=0
         do 30 ii=i,i+nvalline-1
            isval=0
            if(ii.gt.n) go to 20
            do 40 iii=1,nchs
               ic=ic+1
               cs=line(ic:ic)
               ics=ichar(cs)
               if(ics.le.ich9)then
                  nc=ics-ich0
               elseif(ics.le.ichcz) then
                  nc=ics-ichca+10
               else
                  nc=ics-ichla+36
               endif
               isval=ior(ishft(nc,6*(nchs-iii)),isval)
 40         continue
            a(ii)=isval
 30      continue
 20   continue

      facti=1./fact
      if(type.eq.'LIN') then
         do 48 i=1,n
            a(i)=a(i)*facti-bias
 48      continue
      elseif(type.eq.'LOG') then
         scfct=2.**(nbits-1)
         do 55 i=1,n
            a(i)=sign(1.,a(i)-scfct)
     +           *(10.**(abs(20.*(a(i)/scfct-1.))-10.))
 55      continue
      endif

      return
      end
      
c--------------------------------------------------------

      subroutine cscale(a,n,amin,amax)
      dimension a(n)

      amin=1.e30
      amax=-1.e30
      do 10 nn=1,n
         amin=min(amin,a(nn))
         amax=max(amax,a(nn))
 10   continue

      return
      end
      
c---------------------------------------------------------
  
      subroutine cfact(bias,amax,nbits,fact)
      double precision  bias, bignum, fact, tnum

      bignum=dble(2**nbits-1)
      tnum=bias+dble(amax)
      fact=bignum/(tnum+1.d-20)

      return
      end
      
      subroutine viorec(iunit,ia,n,nbits,scr)
      dimension ia(*),scr(*)
      character*1 vc
      common/vform/vc(0:63)
      
      if(vc(0).ne.'0') call vfinit

      call cscalei(ia,n,iamin,iamax)
      bias=-iamin
      fact=1.
      if((iamax+bias).gt.(2**nbits-1)) then
        print*,'!! Warning from viorec !! - truncation will occur !!'
        print*,'   Maximum- ',iamax,'  bias- ',bias,'  nbits-',nbits
      endif

      write(iunit,10)n,nbits,bias,fact
 10   format(2i8,2e20.10)
      call vwrti(iunit,ia,n,bias,fact,nbits,scr)

      return
      end
      
c--------------------------------------------------------

      subroutine vwrti(iunit,ia,n,bias,fact,nbits,iscr)
      character*1 vc
      common/vform/vc(0:63)
      dimension ia(n),iscr(n)
      character line*80,form*5

      do 10 i=1,n
         iscr(i)=(ia(i)+bias)*fact+.001
 10   continue

      nvalline=(78*6)/nbits
      nchs=nbits/6
      do 20 i=1,n,nvalline
         ic=0
         do 30 ii=i,i+nvalline-1
            if(ii.gt.n) go to 31
            isval=iscr(ii)
            do 40 iii=1,nchs
               iiscr=iand(ishft(isval,-6*(nchs-iii)),63)
               ic=ic+1
               line(ic:ic)=vc(iiscr)
 40         continue
 30      continue
 31      continue
         write(form,100) ic
         write(iunit,form) line(1:ic)
 20   continue

 100  format('(a',i2,')')

      return
      end
      
c--------------------------------------------------------

      subroutine viirec(iunit,ia,n)
      character*1 vc
      common/vform/vc(0:63)
      character line*80, cs*1
      dimension ia(*)
      data ich0/48/,ich9/57/,ichcz/90/,ichca/65/,ichla/97/
      ich0=ichar('0')
      ich9=ichar('9')
      ichcz=ichar('Z')
      ichlz=ichar('z')
      ichca=ichar('A')
      ichla=ichar('a')
      
      if(vc(0).ne.'0') call vfinit

      read(iunit,10,end=12)nn,nbits,bias,fact
 10   format(2i8,2e20.10)
      go to 15
 12   continue
      n=-1
      return
 15   continue
      if(nn.ne.n) then
         print*,' Word count mismatch on viirec record '
         print*,' Words on record - ',nn
         print*,' Words expected  - ',n
         stop 'viirec'
      endif

      nvalline=(78*6)/nbits
      nchs=nbits/6
      do 20 i=1,n,nvalline
         read(iunit,'(a78)') line
         ic=0
         do 30 ii=i,i+nvalline-1
            isval=0
            if(ii.gt.n) go to 20
            do 40 iii=1,nchs
               ic=ic+1
               cs=line(ic:ic)
               ics=ichar(cs)
               if(ics.le.ich9)then
                  nc=ics-ich0
               elseif(ics.le.ichcz) then
                  nc=ics-ichca+10
               else
                  nc=ics-ichla+36
               endif
               isval=ior(ishft(nc,6*(nchs-iii)),isval)
 40         continue
            ia(ii)=isval
 30      continue
 20   continue

      facti=1./fact
      do 48 i=1,n
         ia(i)=ia(i)*facti-bias
 48   continue

      return
      end
      
c--------------------------------------------------------

      subroutine cscalei(ia,n,iamin,iamax)
      dimension ia(n)

      iamin= 1000000000
      iamax=-1000000000
      do 10 nn=1,n
         iamin=min(iamin,ia(nn))
         iamax=max(iamax,ia(nn))
 10   continue

      return
      end

</PRE></BODY></HTML>
